package com.bankingsystem.bankingbackend.filter;

import java.io.IOException;

import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class CsrfCookieFilter extends OncePerRequestFilter{

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		//read the token available inside the HttpServletRequest
		CsrfToken csrfToken = (CsrfToken)request.getAttribute(CsrfToken.class.getName());
		// we are checking header name value inside the object if it is not null there might have csrftoken generated by our application
		if(null!=csrfToken.getHeaderName()) {
			//populating the same header name and it's token value inside the response header
			response.setHeader(csrfToken.getHeaderName(), csrfToken.getToken());
		}
		//same response will handover the next filter in the filter chain, this way eventually 
		// when we are sending the response to the UI application, csrftoken will be present inside the header,
		//the spring security will take care that sending the csrf token with cookie to the browser
		filterChain.doFilter(request, response);
		
	}

}
